// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // Add docker support
  binaryTargets = ["linux-arm64-openssl-1.1.x", "darwin", "debian-openssl-1.1.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Here we define our database schema, in order to reflect it in the Prisma Client and
// in the database itself, run "npx prisma migrate dev --name {migration-name}".

// To run previous migrations, run "npx prisma migrate deploy".

// As docker compose is being used, in order to be able to run the migrations we need to
// change the host in the database url in the .env file to localhost before running the
// migrations after running "docker compose up". So the order is:

// docker-compose up -> "change url" -> npx prisma migrate deploy

// You can also have a look at the generated data in prisma studio
// To do so, run "npx prisma studio"

////////////////////////////////////////////////////////////////////////////////////////////
// USER MODEL
////////////////////////////////////////////////////////////////////////////////////////////
enum Role {
  ADMIN // ADMIN access to the system
  INVESTOR // INVESTIDOR
  STARTUP // User that owns a startup (adds the startup relation)
  RUBI_AGENT // AGENT access to the system (adds the agent relation)
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model User {
  id             String  @id @default(uuid())
  legalPerson    Boolean @default(false)
  email          String  @unique
  documentNumber String  @unique
  name           String
  fantasyName    String?
  password       String

  googleConnection   Boolean @default(false)
  facebookConnection Boolean @default(false)

  phone          String?
  secondaryPhone String?

  gender         String?
  profilePicture String?
  birthDate      DateTime?
  address        Address?

  role      Role
  startup   Startup?
  agentInfo AgentInfo?

  status UserStatus @default(ACTIVE)

  linkedin  String?
  instagram String?
  facebook  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("users")
}

////////////////////////////////////////////////////////////////////////////////////////////
// RUBI AGENT
////////////////////////////////////////////////////////////////////////////////////////////
enum HierarchyLevel {
  UNDEFINED
  PRESIDENT
  VICE_PRESIDENT
  DIRECTOR
  MANAGER
  COORDINATOR
  SUPERVISOR
  TECHNICIAN
  ADVISOR
}

model AgentInfo {
  id String @id @default(uuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  hierarchyLevel      HierarchyLevel @default(UNDEFINED)
  accessLevel         Int            @default(1)
  functionDescription String
  registrationNumber  String?

  @@map("agent_infos")
}

////////////////////////////////////////////////////////////////////////////////////////////
// STARTUP
////////////////////////////////////////////////////////////////////////////////////////////

// "O que a sua startup procura no momento?"
enum StartupInterest {
  GROWTH
}

model Startup {
  id String @id @default(uuid())

  userOwnerId String @unique
  userOwner   User   @relation(fields: [userOwnerId], references: [id], onDelete: Cascade)

  documentNumber String   @unique
  corporateName  String
  fantasyName    String
  foundingDate   DateTime

  interest StartupInterest @default(GROWTH)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("startups")
}

////////////////////////////////////////////////////////////////////////////////////////////
// OTHER MODELS
////////////////////////////////////////////////////////////////////////////////////////////

model Address {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  street             String
  brazilianResidence Boolean @default(true)
  number             String
  complement         String?
  neighborhood       String
  city               String
  state              String
  country            String  @default("BR")
  zipCode            String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("addresses")
}
